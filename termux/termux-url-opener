#!/data/data/com.termux/files/usr/bin/env python
import sys
import mimetypes
from pathlib import Path
from urllib.parse import urlparse

import requests
from youtube_dl import YoutubeDL
from mutagen.easyid3 import EasyID3
from mutagen.id3 import ID3, APIC
import ffmpeg
from gmusicapi import Musicmanager
from bs4 import BeautifulSoup
from PIL import Image
from PIL.ExifTags import TAGS

def youtube(url):
    print('uplpad to gmusic[0] or save video[1]?')
    result = input('[0/1]  ')
    
    if result == '0':
        info = YoutubeDL().extract_info(url, download=False)
        target = utils.finddict(info['formats'], 'format_id', '140')
        src = Path('/data/data/com.termux/files/usr/tmp') / (info['id'] + '.' + target['ext'])
        dst = src.with_suffix('.mp3')
        
        if not src.exists():
            print('downloading ' + info['id'])
            music = requests.get(target['url'], headers=target['http_headers'])
            src.write_bytes(music.content)
            
        if not dst.exists():
            print('converting...')
            ffmpeg.input(str(src)).output(str(dst)).run()
        
        print('writing metadata...')
        audio = EasyID3(dst)
        audio['title'] = info['title']
        audio['album'] = 'youtube'
        audio['date']  = info['upload_date']
        audio.save()
        
        thum = requests.get(info['thumbnail'])
        audio = ID3(dst)
        audio['APIC'] = APIC(encoding=3, mime=thum.headers['content-type'], type=3, desc='Cover', data=thum.content)
        audio.save()
        
        print('uploading...')
        mm = Musicmanager()
        mm.login(oauth_credentials='/data/data/com.termux/files/home/.oauth.cred', uploader_id='D4:38:9C:04:CD:F7')
        mm.upload([dst])
        mm.logout()
        
        src.unlink()
        dst.unlink()
        print('finished uploading ' + info['id'])

    elif result == '1':
        opts = {
            'format' : '(299/137/bestvideo)+(251/bestaudio)',
            'outtmpl': '/sdcard/Download/%(title)s.%(ext)s'
        }
        with YoutubeDL(opts) as ytdl:
            ytdl.download([url])
    
    else:
        print('incorrect selection')
        return


def instagram(url):
    instagram_dl.get(url, '/sdcard/Download')
    resp = requests.get(url)
    if resp.status_code != requests.codes.ok:
        return resp.status_code
    
    soup = BeautifulSoup(resp.text, 'html.parser')
    meta = soup.find('meta', property='og:image')
    
    resp = requests.get(meta['content'])
    if resp.status_code != requests.codes.ok:
        return resp.status_code
    
    fname = urlparse(url).path.split('/')[2]
    ext = mimetypes.guess_all_extensions(resp.headers['content-type'])[-1]
    
    (Path(path) / (fname + ext)).write_bytes(resp.content)


def rename_jpeg(path, regex)
    for file in Path(path).iterdir():
    	if not re.match(regex, file.name):
	    	continue
    	else:
            with Image.open(p) as img:
                for k, v in img._getexif().items():
                    if TAGS.get(k) == 'DateTimeOriginal':
                        p.rename(p.with_name(re.sub(':| ', '', v) + p.suffix))



if __name__ == "__main__":
    func = {
        'www.instagram.com' : instagram,
        'youtu.be' : youtube,
        'com.termux' : rename_jpeg
    }
    
    if len(sys.argv) < 2:
        sys.exit(1)
    
    url = sys.argv[1]
    host = urlparse(url).netloc
    if host in func:
        func[host](url)
