#!/data/data/com.termux/files/usr/bin/env python
import sys
import re
import mimetypes
import tempfile
from pathlib import Path
from urllib.parse import urlparse
import subprocess

import requests
from youtube_dl import YoutubeDL
from mutagen.easyid3 import EasyID3
from mutagen.id3 import ID3, APIC
import ffmpeg
from gmusicapi import Musicmanager
from bs4 import BeautifulSoup
import img2pdf
from PIL import Image


def youtube(url):
    print('uplpad to gmusic[0] or save video[1]?')
    result = input('[0/1]  ')
    
    if result == '0':
        info = YoutubeDL().extract_info(url, download=False)
        target = utils.finddict(info['formats'], 'format_id', '140')
        src = Path('/data/data/com.termux/files/usr/tmp') / (info['id'] + '.' + target['ext'])
        dst = src.with_suffix('.mp3')
        
        if not src.exists():
            print('downloading ' + info['id'])
            music = requests.get(target['url'], headers=target['http_headers'])
            src.write_bytes(music.content)
            
        if not dst.exists():
            print('converting...')
            ffmpeg.input(str(src)).output(str(dst)).run()
        
        print('writing metadata...')
        audio = EasyID3(dst)
        audio['title'] = info['title']
        audio['album'] = 'youtube'
        audio['date']  = info['upload_date']
        audio.save()
        
        thum = requests.get(info['thumbnail'])
        audio = ID3(dst)
        audio['APIC'] = APIC(encoding=3, mime=thum.headers['content-type'], type=3, desc='Cover', data=thum.content)
        audio.save()
        
        print('uploading...')
        mm = Musicmanager()
        mm.login(oauth_credentials='/data/data/com.termux/files/home/.oauth.cred', uploader_id='D4:38:9C:04:CD:F7')
        mm.upload([dst])
        mm.logout()
        
        src.unlink()
        dst.unlink()
        print('finished uploading ' + info['id'])

    elif result == '1':
        opts = {
            'format' : '(299/137/bestvideo)+(251/bestaudio)',
            'outtmpl': '/sdcard/Download/%(title)s.%(ext)s'
        }
        with YoutubeDL(opts) as ytdl:
            ytdl.download([url])
    
    else:
        print('incorrect selection')
        return


def instagram_dl(url):
    resp = requests.get(url)
    if resp.status_code != requests.codes.ok:
        return resp.status_code
    
    soup = BeautifulSoup(resp.text, 'html.parser')
    meta = soup.find('meta', property='og:image')
    
    resp = requests.get(meta['content'])
    if resp.status_code != requests.codes.ok:
        return resp.status_code
    
    fname = urlparse(url).path.split('/')[2]
    ext = mimetypes.guess_all_extensions(resp.headers['content-type'])[-1]
    
    (Path('/sdcard/Picture/Instagram') / (fname + ext)).write_bytes(resp.content)


def rename_jpeg():
    patt = re.compile(r':| ')
    for file in Path('/sdcard/DCIM').glob('**/DSC*.JPG'):
        img  = Image.open(file)
        date = img._getexif()[0x9003]
        file.rename(file.with_name(patt.sub('', date) + file.suffix))


def daily(url):
	rename_jpeg()
	res = subprocess.call(['rclone', 'move', '/sdcard/Pictures/', 'upload_pic:/Pictures'])
	res1 = subprocess.call(['rclone', 'move', '/sdcard/pixiv', 'upload_pic:/Pictures/Pixiv'])
	if res != 0:
		sys.exit(res)
	if res1 != 0:
	    sys.exit(res1)


def html2pdf(url):
    resp = requests.get(url)
    if resp.status_code != requests.codes.ok:
        return resp.status_code
    
    soup = BeautifulSoup(resp.text, 'html.parser')
    urls = []
    
    for tag in soup.find_all(['img', 'a']):
        if tag.name == 'img':
            img = tag['src']
        else:
            img = tag['href']
        
        if mimetypes.guess_type(img)[0] == 'image/jpeg':
            urls.append(img)
    
    fp = tempfile.NamedTemporaryFile(mode='w', delete=False)
    fp.write('\n'.join(urls))
    fp.close()
    
    subprocess.call(['vim', fp.name])
    tmp = Path(fp.name)
    
    imgs = []
    for url in tmp.read_text().splitlines():
        resp = requests.get(url)
        if resp.status_code == requests.codes.ok:
            imgs.append(resp.content)
    
    names = urlparse(url).path.split('/')
    if names[-1] == '':
        name = names[-2]
    else:
        name = names[-1]
    
    (Path('/sdcard/Download') / (name + '.pdf')).write_bytes(img2pdf.convert(imgs))
    tmp.unlink()


if __name__ == "__main__":
    func = {
        'www.instagram.com' : instagram_dl,
        'youtu.be' : youtube,
        'com.termux' : daily
    }
    
    if len(sys.argv) < 2:
        sys.exit(1)
    
    url = sys.argv[1]
    host = urlparse(url).netloc
    if host in func:
        func[host](url)
    else:
        html2pdf(url)

